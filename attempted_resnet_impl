import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from tqdm import tqdm
from dataset import OsuFramesDataset
import torchvision.transforms as transforms
from torchvision.models import resnet18
transform = transforms.ToTensor()


def numpyToTensor(arr, d):
    print(arr.shape)
    Tn = torch.Tensor(d[0], d[1])
    Ts = torch.stack([Tn, Tn, Tn]).unsqueeze(0)
    print(Ts.shape)
    return Ts


class Net(nn.Module):
    def __init__(self, dimensions):
        super().__init__()
        self.d = dimensions
        self.conv = resnet18(pretrained=True)
        self.conv1 = nn.Conv2d(1, 32, 3)
        self.conv2 = nn.Conv2d(32, 64, 3)
        self.conv3 = nn.Conv2d(64, 128, 3)
        self._lin = None
        self.fc1 = None
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.fc4 = nn.Linear(256, 4)

    def _calc_linear_size(self, val):
        ret = self.convs(val).shape
        return ret[1] * ret[2] * ret[3]

    def convs(self, x: torch.Tensor) -> torch.Tensor:
        x = F.max_pool2d(F.relu(self.conv(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv(x)), (2, 2))
        return x

    def forward(self, x: torch.Tensor):

        x = self.convs(x)
        if self._lin is None:
            self._lin = self._calc_linear_size(x)
            self.fc1 = nn.Linear(self._lin, 1024)
        x = x.view(-1, self._lin)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.fc4(x)
        return x


def Train(project_name: str, force_rebuild=False, batch_size=8, epochs=10, dimensions=(int(540 / 2), int(960 / 2))):

    device = torch.device(
        'cuda:0') if torch.cuda.is_available() else torch.device('cpu')

    osu_dataset = OsuFramesDataset(project_name=project_name,
                                   force_rebuild=force_rebuild)

    train_data = osu_dataset.data
    train_results = osu_dataset.results

    print()

    net = Net(dimensions=dimensions).to(device)

    optimzer = optim.Adam(net.parameters(), lr=0.001)
    loss_function = nn.MSELoss()

    VAL_PCT = 0.6
    val_size = int(len(train_data)*VAL_PCT)

    results_tensor = torch.Tensor(train_results).to(device)
    train_x = train_data[:-val_size]
    train_y = results_tensor[:-val_size]

    print('Training using {} data'.format(len(train_x)))

    test_x = train_data[-val_size:]
    test_y = results_tensor[-val_size:]

    for epoch in range(epochs):
        for i in tqdm(range(0, len(train_x), batch_size)):

            batch_x = numpyToTensor(train_x[i:i +
                                            batch_size], (dimensions[0], dimensions[1])).to(device)

            batch_y = train_y[i:i+batch_size]

            net.zero_grad()

            outputs = net(batch_x)
            loss = loss_function(outputs, batch_y)
            loss.backward()
            optimzer.step()

    print("LOSS", loss)

    correct = 0
    total = 0

    with torch.no_grad():
        for i in range(10):
            x = i + 30
            print("ACTUAL:", train_y[x], 'PREDICTED:', net(transform(
                train_x[x]).view(-1, 1, dimensions[0], dimensions[1]).to(device)))


Train('osu')
